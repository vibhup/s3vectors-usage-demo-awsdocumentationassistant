{
  "source_file": "aws_iam_policies.md",
  "total_chunks": 9,
  "chunks": [
    {
      "chunk_id": "8840477f_002",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Identities",
      "content": "## Identities\n\nWhen you create an AWS account, you begin with one sign-in identity that has complete access to all AWS services\nand resources in the account. This identity is called the AWS account *root user* and is accessed by\nsigning in with the email address and password that you used to create the account. We\nstrongly recommend that you don't use the root user for your everyday tasks. Safeguard your root user credentials and use them to\nperform the tasks that only the root user can perform.\n\nUse IAM to set up other identities in addition to your\nroot user, such as administrators, analysts, and developers, and grant them access to the resources\nthey need to succeed in their tasks.",
      "token_count": 146,
      "char_count": 693,
      "chunk_index": 2,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_003",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Access management",
      "content": "## Access management\n\nAfter a user is set up in IAM, they use their sign-in credentials to authenticate with\nAWS. Authentication is provided by matching the sign-in credentials to a principal (an\nIAM user, AWS STS federated principal, IAM role, or application) trusted by the AWS account. Next, a\nrequest is made to grant the principal access to resources. Access is granted in response to an\nauthorization request if the user has been given permission to the resource. For example, when\nyou first sign in to the console and are on the console Home page, you aren't accessing a\nspecific service. When you select a service, the request for authorization is sent to that\nservice and it looks to see if your identity is on the list of authorized users, what policies\nare being enforced to control the level of access granted, and any other policies that might be\nin effect. Authorization requests can be made by principals within your AWS account or from\nanother AWS account that you trust.\n\nOnce authorized, the principal can take action or perform operations on resources in your\nAWS account. For example, the principal could launch a new Amazon Elastic Compute Cloud instance, modify\nIAM group membership, or delete Amazon Simple Storage Service buckets.",
      "token_count": 253,
      "char_count": 1254,
      "chunk_index": 3,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_004",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Service availability",
      "content": "## Service availability\n\nIAM, like many other AWS services, is eventually consistent.\nIAM achieves high availability by replicating data across multiple servers within\nAmazon's data centers around the world. If a request to change some data is successful,\nthe change is committed and safely stored. However, the change must be replicated across\nIAM, which can take some time. Such changes include creating or updating users,\ngroups, roles, or policies. We recommend that you do not include such IAM changes in the\ncritical, high-availability code paths of your application. Instead, make IAM changes in\na separate initialization or setup routine that you run less frequently. Also, be sure\nto verify that the changes have been propagated before production workflows depend on\nthem.",
      "token_count": 151,
      "char_count": 781,
      "chunk_index": 4,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_007",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Policies and permissions in AWS Identity and Access Management",
      "content": "# Policies and permissions in AWS Identity and Access Management\n\nManage access in AWS by creating policies and attaching them to IAM identities (users,\ngroups of users, or roles) or AWS resources. A policy is an object in AWS that, when\nassociated with an identity or resource, defines their permissions. AWS evaluates these\npolicies when an IAM principal (user or role) makes a request. Permissions in the policies\ndetermine whether the request is allowed or denied. Most policies are stored in AWS as JSON\ndocuments. AWS supports seven types of policies: identity-based policies, resource-based\npolicies, permissions boundaries, AWS Organizations service control policies (SCPs), AWS Organizations resource control\npolicies (RCPs), access control lists (ACLs), and session policies.\n\nIAM policies define permissions for an action regardless of the method that you use to\nperform the operation. For example, if a policy allows the GetUser action, then a user with that policy can\nget user information from the AWS Management Console, the AWS CLI, or the AWS API. When you create an IAM\nuser, you can choose to allow console or programmatic access. If console access is allowed, the\nIAM user can sign in to the console using their sign-in credentials. If programmatic access is\nallowed, the user can use access keys to work with the CLI or API.",
      "token_count": 277,
      "char_count": 1345,
      "chunk_index": 7,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_008",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Policy types",
      "content": "## Policy types\n\nThe following policy types, listed in order from most frequently used to less frequently\nused, are available for use in AWS. For more details, see the sections below for each policy\ntype.\n\n* **Identity-based policies** – Attach managed\n  and inline policies to IAM identities (users, groups to\n  which users belong, or roles). Identity-based policies grant permissions to an\n  identity.\n* **Resource-based policies** – Attach inline policies to resources. The most\n  common examples of resource-based policies are Amazon S3 bucket policies and IAM role trust\n  policies. Resource-based policies grant permissions to the principal that is specified in\n  the policy. Principals can be in the same account as the resource or in other\n  accounts.\n* **Permissions boundaries** – Use a managed policy as the permissions boundary\n  for an IAM entity (user or role). That policy defines the maximum permissions that the\n  identity-based policies can grant to an entity, but does not grant permissions.\n  Permissions boundaries do not define the maximum permissions that a resource-based policy\n  can grant to an entity.\n* **AWS Organizations SCPs**\n  – Use an AWS Organizations service control policy (SCP) to define the maximum permissions\n  for IAM users and IAM roles within accounts in your organization or organizational\n  unit (OU). SCPs limit permissions that identity-based policies or resource-based policies\n  grant to IAM users or IAM roles within the account. SCPs do not grant\n  permissions.\n* **AWS Organizations RCPs**\n  – Use an AWS Organizations resource control policy (RCP) to define the maximum permissions\n  for resources within accounts in your organization or organizational unit (OU). RCPs limit\n  permissions that identity-based and resource-based policies can grant to resources in\n  accounts within your organization. RCPs do not grant permissions.\n* **Access control lists (ACLs)** – Use ACLs to control which principals in other accounts\n  can access the resource to which the ACL is attached. ACLs are similar to resource-based\n  policies, although they are the only policy type that does not use the JSON policy\n  document structure. ACLs are cross-account permissions policies that grant permissions to\n  the specified principal. ACLs cannot grant permissions to entities within the same\n  account.\n* **Session policies** – Pass advanced session policies when you use the\n  AWS CLI or AWS API to assume a role or a federated user. Session policies limit the\n  permissions that the role or user's identity-based policies grant to the session. Session\n  policies limit permissions for a created session, but do not grant permissions.",
      "token_count": 546,
      "char_count": 2672,
      "chunk_index": 8,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_009",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Identity-based policies",
      "content": "### Identity-based policies\n\nIdentity-based policies are JSON permissions policy documents that control what actions\nan identity (users, groups of users, and roles) can perform, on which resources, and under\nwhat conditions. Identity-based policies can be further categorized:\n\n* **Managed policies** – Standalone identity-based policies that you can attach to\n  multiple users, groups, and roles in your AWS account. There are two types of managed\n  policies:\n\n  + **AWS managed policies** – Managed\n    policies that are created and managed by AWS.\n  + **Customer managed policies** – Managed\n    policies that you create and manage in your AWS account. Customer managed policies\n    provide more precise control over your policies than AWS managed policies.\n* **Inline policies** – Policies that you add directly to a single user, group,\n  or role. Inline policies maintain a strict one-to-one relationship between a policy and\n  an identity. They are deleted when you delete the identity.",
      "token_count": 199,
      "char_count": 992,
      "chunk_index": 9,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_010",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "Resource-based policies",
      "content": "### Resource-based policies\n\nResource-based policies are JSON policy documents that you attach to a resource such as\nan Amazon S3 bucket. These policies grant the specified principal permission to perform specific\nactions on that resource and defines under what conditions this applies. Resource-based\npolicies are inline policies. There are no managed resource-based policies.\n\nTo enable cross-account access, you can specify an entire account or IAM entities in\nanother account as the principal in a resource-based policy. Adding a cross-account\nprincipal to a resource-based policy is only half of establishing the trust relationship.\nWhen the principal and the resource are in separate AWS accounts, you must also use an\nidentity-based policy to grant the principal access to the resource. However, if a\nresource-based policy grants access to a principal in the same account, no additional\nidentity-based policy is required.\n\nThe IAM service supports only one type of resource-based policy called a role\n*trust policy*, which is attached to an IAM role. An\nIAM role is both an identity and a resource that supports resource-based policies. For\nthat reason, you must attach both a trust policy and an identity-based policy to an IAM\nrole. Trust policies define which principal entities (accounts, users, roles, and federated\nusers) can assume the role.",
      "token_count": 263,
      "char_count": 1355,
      "chunk_index": 10,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_011",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "IAM permissions boundaries",
      "content": "### IAM permissions boundaries\n\nA permissions boundary is an advanced feature in which you set the maximum permissions\nthat an identity-based policy can grant to an IAM entity. When you set a permissions\nboundary for an entity, the entity can perform only the actions that are allowed by both its\nidentity-based policies and its permissions boundaries. If you specify a role session or\nuser in the principal element of a resource-based policy, an explicit allow in the\npermission boundary is not required. However, if you specify a role ARN in the principal\nelement of a resource-based policy, an explicit allow in the permission boundary is\nrequired. In both cases, an explicit deny in the permission boundary is effective. An\nexplicit deny in any of these policies overrides the allow.",
      "token_count": 154,
      "char_count": 787,
      "chunk_index": 11,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    },
    {
      "chunk_id": "8840477f_012",
      "source_file": "aws_iam_policies.md",
      "title": "What is IAM?",
      "section": "AWS Organizations service control policies (SCPs)",
      "content": "### AWS Organizations service control policies (SCPs)\n\nIf you enable all features in an organization, then you can apply service control\npolicies (SCPs) to any or all of your accounts. SCPs are JSON policies that specify the\nmaximum permissions for IAM users and IAM roles within accounts of an organization or\norganizational unit (OU). The SCP limits permissions for principals in member accounts,\nincluding each AWS account root user. An explicit deny in any of these policies overrides an allow in\nother policies.",
      "token_count": 103,
      "char_count": 516,
      "chunk_index": 12,
      "total_chunks": 12,
      "overlap_with_previous": false,
      "metadata": {
        "service_name": "Aws Iam Policies.Md",
        "document_type": "guide",
        "header_level": 1,
        "file_size_chars": 11549,
        "processing_timestamp": "2025-08-02"
      }
    }
  ]
}